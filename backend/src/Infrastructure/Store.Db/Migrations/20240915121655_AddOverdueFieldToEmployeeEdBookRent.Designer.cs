// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Store.Db;

#nullable disable

namespace Store.Db.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20240915121655_AddOverdueFieldToEmployeeEdBookRent")]
    partial class AddOverdueFieldToEmployeeEdBookRent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Acts.EdBookDecommissioning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ApprovedDate")
                        .HasColumnType("date")
                        .HasColumnName("approved_date");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<bool>("InspectorApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("inspector_approved");

                    b.Property<int>("Reason")
                        .HasColumnType("integer")
                        .HasColumnName("reason");

                    b.Property<Guid>("ed_book_in_balance_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ed_book_in_balance_id")
                        .IsUnique();

                    b.ToTable("ed_book_decommissionings", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Books.BaseEducationalBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Appointment")
                        .HasColumnType("integer");

                    b.Property<int?>("Chapter")
                        .HasColumnType("integer");

                    b.Property<int>("EndClass")
                        .HasColumnType("integer");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("LeaveFromFederalBooksListAt")
                        .HasColumnType("date")
                        .HasColumnName("leave_from_federal_books_list_at");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("PublishingSeries")
                        .HasColumnType("integer");

                    b.Property<int>("StartClass")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<Guid>("author_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("editor_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("publishing_house_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("publishing_place_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("subject_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("author_id");

                    b.HasIndex("editor_id");

                    b.HasIndex("publishing_house_id");

                    b.HasIndex("publishing_place_id");

                    b.HasIndex("subject_id");

                    b.ToTable("base_ed_books", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Books.EducationalBookInBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Condition")
                        .HasColumnType("integer")
                        .HasColumnName("condition");

                    b.Property<int>("InPlaceCount")
                        .HasColumnType("integer")
                        .HasColumnName("in_place_count");

                    b.Property<bool>("InStock")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("note");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid?>("SchoolGroundId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalCount")
                        .HasColumnType("integer")
                        .HasColumnName("total_count");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.Property<Guid?>("base_book_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("base_ed_book_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("book_owner_school_ground_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("current_school_ground_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("supply_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SchoolGroundId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("base_book_id");

                    b.HasIndex("base_ed_book_id");

                    b.HasIndex("book_owner_school_ground_id");

                    b.HasIndex("current_school_ground_id");

                    b.HasIndex("supply_id");

                    b.ToTable("ed_books_in_balance", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RentRequests.EducationalBookSchoolRentRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("OwnerReadyGiveBookCount")
                        .HasColumnType("integer")
                        .HasColumnName("owner_ready_give_book_count");

                    b.Property<bool>("ReceivedByDebtor")
                        .HasColumnType("boolean")
                        .HasColumnName("received_by_debtor");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("integer")
                        .HasColumnName("request_status");

                    b.Property<int>("RequestingBookCount")
                        .HasColumnType("integer")
                        .HasColumnName("requesting_book_count");

                    b.Property<bool>("ResolvedByRequestedSide")
                        .HasColumnType("boolean")
                        .HasColumnName("resolved_requested_side");

                    b.Property<bool>("ResolvedByRequestingSide")
                        .HasColumnType("boolean")
                        .HasColumnName("resolved_requesting_side");

                    b.Property<bool>("SendByOwner")
                        .HasColumnType("boolean")
                        .HasColumnName("send_by_owner");

                    b.Property<bool>("ViewedUpdatesByRequestedSide")
                        .HasColumnType("boolean")
                        .HasColumnName("viewed_updates_requested_side");

                    b.Property<bool>("ViewedUpdatesByRequestingSide")
                        .HasColumnType("boolean")
                        .HasColumnName("viewed_updates_requesting_side");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<Guid>("debtor_school_ground_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ed_book_in_balance_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("owner_school_ground_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("created_by");

                    b.HasIndex("debtor_school_ground_id");

                    b.HasIndex("ed_book_in_balance_id");

                    b.HasIndex("owner_school_ground_id");

                    b.ToTable("ed_book_school_rent_requests", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RentRequests.EducationalBookSchoolRentRequestConversationMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("message");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<bool>("ViewedByReveiver")
                        .HasColumnType("boolean")
                        .HasColumnName("viewed_by_receiver");

                    b.Property<Guid>("ed_book_rent_request_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("school_ground_sender_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ed_book_rent_request_id");

                    b.HasIndex("school_ground_sender_id");

                    b.ToTable("ed_books_school_rent_request_conversation_messages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rents.People.EducationalBookEmployeeRent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsOverdue")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RentReportId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<Guid>("ed_book_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("employee_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RentReportId");

                    b.HasIndex("ed_book_id");

                    b.HasIndex("employee_id");

                    b.ToTable("ed_book_employee_rent", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rents.People.EducationalBookStudentRent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOverdue")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("rent_report_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("student_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("rent_report_id");

                    b.HasIndex("student_id");

                    b.ToTable("ed_book_student_rent", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rents.School.EducationalBookSchoolRent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CloseByDebtor")
                        .HasColumnType("boolean")
                        .HasColumnName("closed_by_debtor");

                    b.Property<bool>("CloseByOwner")
                        .HasColumnType("boolean")
                        .HasColumnName("closed_by_owner");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<bool>("IsOverdue")
                        .HasColumnType("boolean")
                        .HasColumnName("overdue");

                    b.Property<DateOnly>("ReturnDate")
                        .HasColumnType("date")
                        .HasColumnName("return_date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<Guid>("deptor_school_ground_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ed_book_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("owner_school_ground_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("deptor_school_ground_id");

                    b.HasIndex("ed_book_id");

                    b.HasIndex("owner_school_ground_id");

                    b.ToTable("ed_book_school_rents", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Reports.PeopleRents.PeopleRentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AnotherRentCount")
                        .HasColumnType("integer")
                        .HasColumnName("another_rent_count");

                    b.Property<int>("EdBookRentCount")
                        .HasColumnType("integer")
                        .HasColumnName("ed_book_rent_count");

                    b.Property<int?>("Month")
                        .HasColumnType("integer")
                        .HasColumnName("month");

                    b.Property<int>("RentCountForClasses10To11")
                        .HasColumnType("integer")
                        .HasColumnName("rent_count_classes_10_11");

                    b.Property<int>("RentCountForClasses1To4")
                        .HasColumnType("integer")
                        .HasColumnName("rent_count_classes_1_4");

                    b.Property<int>("RentCountForClasses5To9")
                        .HasColumnType("integer")
                        .HasColumnName("rent_count_classes_5_9");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.ToTable("people_rent_reports", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Reports.PeopleRents.PeopleRentReportGenreStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Genre")
                        .HasColumnType("integer")
                        .HasColumnName("genre");

                    b.Property<int>("RentCount")
                        .HasColumnType("integer")
                        .HasColumnName("rent_count");

                    b.Property<Guid>("people_rent_report_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("people_rent_report_id");

                    b.ToTable("people_rent_report_genre_statistics", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SchoolStructure.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("EmployeeStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("Ground_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ManagementClassId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("surname");

                    b.Property<Guid?>("managing_class_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("school_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Ground_id");

                    b.HasIndex("ManagementClassId");

                    b.HasIndex("school_id");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SchoolStructure.Librarian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsGeneral")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("surname");

                    b.Property<Guid>("ground_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("school_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ground_id");

                    b.HasIndex("school_id");

                    b.ToTable("librarians", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SchoolStructure.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("off_name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("short_name");

                    b.HasKey("Id");

                    b.ToTable("schools", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SchoolStructure.SchoolClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Ground_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("num");

                    b.Property<Guid?>("SchoolGroundId")
                        .HasColumnType("uuid");

                    b.Property<int>("SubjectCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("managing_teacher_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("school_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Ground_id");

                    b.HasIndex("SchoolGroundId");

                    b.HasIndex("managing_teacher_id")
                        .IsUnique();

                    b.HasIndex("school_id");

                    b.ToTable("classes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SchoolStructure.SchoolGround", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("school_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("school_id");

                    b.ToTable("school_grounds", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SchoolStructure.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("surname");

                    b.Property<Guid?>("class_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ground_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("school_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("class_id");

                    b.HasIndex("ground_id");

                    b.HasIndex("school_id");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Subjects.ClassSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("school_class_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("subject_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("school_class_id");

                    b.HasIndex("subject_id");

                    b.ToTable("class_subjects", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Subjects.ClassSubjectChapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<Guid>("class_subject_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("class_subject_id");

                    b.ToTable("class_subject_chapters", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Subjects.ClassSubjectChapterEdBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ed_book_in_balance_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("subject_chapter_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ed_book_in_balance_id");

                    b.HasIndex("subject_chapter_id");

                    b.ToTable("class_subject_chapter_ed_books", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Supplies.BookSupply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("FullFilled")
                        .HasColumnType("boolean")
                        .HasColumnName("full_filled");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("invoice_number");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("supplier");

                    b.Property<DateOnly>("SupplyDate")
                        .HasColumnType("date")
                        .HasColumnName("supply_date");

                    b.Property<Guid>("ground_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("school_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ground_id");

                    b.HasIndex("school_id");

                    b.ToTable("book_supplies", (string)null);
                });

            modelBuilder.Entity("Domain.HelpingEntities.BookAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.HasKey("Id");

                    b.ToTable("book_authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b0489f0-33db-4085-b45c-d93bd1517ff1"),
                            FullName = "Пушкин А.С."
                        },
                        new
                        {
                            Id = new Guid("01715fbe-af4f-4f19-82d1-7e22201fbd26"),
                            FullName = "Достоевский Ф.М."
                        });
                });

            modelBuilder.Entity("Domain.HelpingEntities.Editor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.HasKey("Id");

                    b.ToTable("book_editors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10b8b598-e5a4-4633-bb20-056fa10d3863"),
                            FullName = "Пушкин А.С."
                        },
                        new
                        {
                            Id = new Guid("1aebd275-e6e3-4697-93e3-963dd25d0050"),
                            FullName = "Достоевский Ф.М."
                        });
                });

            modelBuilder.Entity("Domain.HelpingEntities.PublishingHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("publishing_houses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2b4aea0-72eb-4c15-b8df-a2e3a5e7a2ca"),
                            Name = "Издательство"
                        },
                        new
                        {
                            Id = new Guid("4616bbb8-68b7-40b8-ab49-72c7bfae2302"),
                            Name = "Просвещение"
                        });
                });

            modelBuilder.Entity("Domain.HelpingEntities.PublishingPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("publishing_places", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a654195a-7289-4671-8442-027e2f3e74e0"),
                            Name = "Москва"
                        },
                        new
                        {
                            Id = new Guid("c2ebd291-fb56-4068-9be7-965481c737fd"),
                            Name = "Краснодар"
                        });
                });

            modelBuilder.Entity("Domain.HelpingEntities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("subjects", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e07794f-baf8-48aa-9982-7d0c710ec817"),
                            Name = "Математика"
                        },
                        new
                        {
                            Id = new Guid("d421fbe4-3638-4e33-ae93-31e77e063a0f"),
                            Name = "Русский язык"
                        });
                });

            modelBuilder.Entity("ed_books_another_authors", b =>
                {
                    b.Property<Guid>("author_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("base_ed_book_id")
                        .HasColumnType("uuid");

                    b.HasKey("author_id", "base_ed_book_id");

                    b.HasIndex("base_ed_book_id");

                    b.ToTable("ed_books_another_authors");
                });

            modelBuilder.Entity("Domain.Entities.Acts.EdBookDecommissioning", b =>
                {
                    b.HasOne("Domain.Entities.Books.EducationalBookInBalance", "EdBook")
                        .WithOne("Decommissioning")
                        .HasForeignKey("Domain.Entities.Acts.EdBookDecommissioning", "ed_book_in_balance_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EdBook");
                });

            modelBuilder.Entity("Domain.Entities.Books.BaseEducationalBook", b =>
                {
                    b.HasOne("Domain.HelpingEntities.BookAuthor", "Author")
                        .WithMany("Books")
                        .HasForeignKey("author_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.HelpingEntities.Editor", "Editor")
                        .WithMany("Books")
                        .HasForeignKey("editor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.HelpingEntities.PublishingHouse", "PublishingHouse")
                        .WithMany("Books")
                        .HasForeignKey("publishing_house_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.HelpingEntities.PublishingPlace", "PublishingPlace")
                        .WithMany("Books")
                        .HasForeignKey("publishing_place_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.HelpingEntities.Subject", "Subject")
                        .WithMany("Books")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Editor");

                    b.Navigation("PublishingHouse");

                    b.Navigation("PublishingPlace");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entities.Books.EducationalBookInBalance", b =>
                {
                    b.HasOne("Domain.Entities.SchoolStructure.SchoolGround", null)
                        .WithMany("EducationalBooks")
                        .HasForeignKey("SchoolGroundId");

                    b.HasOne("Domain.Entities.SchoolStructure.School", null)
                        .WithMany("EducationalBooks")
                        .HasForeignKey("SchoolId");

                    b.HasOne("Domain.Entities.Books.EducationalBookInBalance", "BaseBook")
                        .WithMany()
                        .HasForeignKey("base_book_id");

                    b.HasOne("Domain.Entities.Books.BaseEducationalBook", "BaseEducationalBook")
                        .WithMany()
                        .HasForeignKey("base_ed_book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SchoolStructure.SchoolGround", "BookOwnerGround")
                        .WithMany()
                        .HasForeignKey("book_owner_school_ground_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SchoolStructure.SchoolGround", "CurrentSchoolGround")
                        .WithMany()
                        .HasForeignKey("current_school_ground_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Supplies.BookSupply", "Supply")
                        .WithMany("EdBooks")
                        .HasForeignKey("supply_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseBook");

                    b.Navigation("BaseEducationalBook");

                    b.Navigation("BookOwnerGround");

                    b.Navigation("CurrentSchoolGround");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("Domain.Entities.RentRequests.EducationalBookSchoolRentRequest", b =>
                {
                    b.HasOne("Domain.Entities.SchoolStructure.SchoolGround", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("created_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SchoolStructure.SchoolGround", "DebtorSchoolGround")
                        .WithMany()
                        .HasForeignKey("debtor_school_ground_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Books.EducationalBookInBalance", "Book")
                        .WithMany()
                        .HasForeignKey("ed_book_in_balance_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SchoolStructure.SchoolGround", "OwnerSchoolGround")
                        .WithMany()
                        .HasForeignKey("owner_school_ground_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("CreatedBy");

                    b.Navigation("DebtorSchoolGround");

                    b.Navigation("OwnerSchoolGround");
                });

            modelBuilder.Entity("Domain.Entities.RentRequests.EducationalBookSchoolRentRequestConversationMessage", b =>
                {
                    b.HasOne("Domain.Entities.RentRequests.EducationalBookSchoolRentRequest", "RentRequest")
                        .WithMany("Messages")
                        .HasForeignKey("ed_book_rent_request_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SchoolStructure.SchoolGround", "MessageSender")
                        .WithMany()
                        .HasForeignKey("school_ground_sender_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageSender");

                    b.Navigation("RentRequest");
                });

            modelBuilder.Entity("Domain.Entities.Rents.People.EducationalBookEmployeeRent", b =>
                {
                    b.HasOne("Domain.Entities.Reports.PeopleRents.PeopleRentReport", "RentReport")
                        .WithMany()
                        .HasForeignKey("RentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Books.EducationalBookInBalance", "Book")
                        .WithMany()
                        .HasForeignKey("ed_book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SchoolStructure.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("employee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Employee");

                    b.Navigation("RentReport");
                });

            modelBuilder.Entity("Domain.Entities.Rents.People.EducationalBookStudentRent", b =>
                {
                    b.HasOne("Domain.Entities.Books.EducationalBookInBalance", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Reports.PeopleRents.PeopleRentReport", "RentReport")
                        .WithMany()
                        .HasForeignKey("rent_report_id");

                    b.HasOne("Domain.Entities.SchoolStructure.Student", "Student")
                        .WithMany("EdBookRents")
                        .HasForeignKey("student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("RentReport");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Rents.School.EducationalBookSchoolRent", b =>
                {
                    b.HasOne("Domain.Entities.SchoolStructure.SchoolGround", "DeptorSchoolGround")
                        .WithMany()
                        .HasForeignKey("deptor_school_ground_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Books.EducationalBookInBalance", "Book")
                        .WithMany()
                        .HasForeignKey("ed_book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SchoolStructure.SchoolGround", "OwnerSchoolGround")
                        .WithMany()
                        .HasForeignKey("owner_school_ground_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("DeptorSchoolGround");

                    b.Navigation("OwnerSchoolGround");
                });

            modelBuilder.Entity("Domain.Entities.Reports.PeopleRents.PeopleRentReportGenreStatistic", b =>
                {
                    b.HasOne("Domain.Entities.Reports.PeopleRents.PeopleRentReport", "Report")
                        .WithMany("StaticsticsToGenres")
                        .HasForeignKey("people_rent_report_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Domain.Entities.SchoolStructure.Employee", b =>
                {
                    b.HasOne("Domain.Entities.SchoolStructure.SchoolGround", "Ground")
                        .WithMany("Employees")
                        .HasForeignKey("Ground_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SchoolStructure.SchoolClass", "ManagementClass")
                        .WithMany()
                        .HasForeignKey("ManagementClassId");

                    b.HasOne("Domain.Entities.SchoolStructure.School", "School")
                        .WithMany("Employees")
                        .HasForeignKey("school_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ground");

                    b.Navigation("ManagementClass");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Domain.Entities.SchoolStructure.Librarian", b =>
                {
                    b.HasOne("Domain.Entities.SchoolStructure.SchoolGround", "Ground")
                        .WithMany("Librarians")
                        .HasForeignKey("ground_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SchoolStructure.School", "School")
                        .WithMany("Librarians")
                        .HasForeignKey("school_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ground");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Domain.Entities.SchoolStructure.SchoolClass", b =>
                {
                    b.HasOne("Domain.Entities.SchoolStructure.SchoolGround", "Ground")
                        .WithMany()
                        .HasForeignKey("Ground_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SchoolStructure.SchoolGround", null)
                        .WithMany("Classes")
                        .HasForeignKey("SchoolGroundId");

                    b.HasOne("Domain.Entities.SchoolStructure.Employee", "Manager")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.SchoolStructure.SchoolClass", "managing_teacher_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.SchoolStructure.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("school_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ground");

                    b.Navigation("Manager");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Domain.Entities.SchoolStructure.SchoolGround", b =>
                {
                    b.HasOne("Domain.Entities.SchoolStructure.School", "School")
                        .WithMany("Grounds")
                        .HasForeignKey("school_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Domain.Entities.SchoolStructure.Student", b =>
                {
                    b.HasOne("Domain.Entities.SchoolStructure.SchoolClass", "SchoolClass")
                        .WithMany("Students")
                        .HasForeignKey("class_id");

                    b.HasOne("Domain.Entities.SchoolStructure.SchoolGround", "Ground")
                        .WithMany("Students")
                        .HasForeignKey("ground_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SchoolStructure.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("school_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ground");

                    b.Navigation("School");

                    b.Navigation("SchoolClass");
                });

            modelBuilder.Entity("Domain.Entities.Subjects.ClassSubject", b =>
                {
                    b.HasOne("Domain.Entities.SchoolStructure.SchoolClass", "SchoolClass")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("school_class_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.HelpingEntities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolClass");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entities.Subjects.ClassSubjectChapter", b =>
                {
                    b.HasOne("Domain.Entities.Subjects.ClassSubject", "ClassSubject")
                        .WithMany("Chapters")
                        .HasForeignKey("class_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSubject");
                });

            modelBuilder.Entity("Domain.Entities.Subjects.ClassSubjectChapterEdBook", b =>
                {
                    b.HasOne("Domain.Entities.Books.EducationalBookInBalance", "EdBookInBalance")
                        .WithMany()
                        .HasForeignKey("ed_book_in_balance_id");

                    b.HasOne("Domain.Entities.Subjects.ClassSubjectChapter", "SubjectChapter")
                        .WithMany("EdBooks")
                        .HasForeignKey("subject_chapter_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EdBookInBalance");

                    b.Navigation("SubjectChapter");
                });

            modelBuilder.Entity("Domain.Entities.Supplies.BookSupply", b =>
                {
                    b.HasOne("Domain.Entities.SchoolStructure.SchoolGround", "Ground")
                        .WithMany()
                        .HasForeignKey("ground_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SchoolStructure.School", "School")
                        .WithMany()
                        .HasForeignKey("school_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ground");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ed_books_another_authors", b =>
                {
                    b.HasOne("Domain.HelpingEntities.BookAuthor", null)
                        .WithMany()
                        .HasForeignKey("author_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Books.BaseEducationalBook", null)
                        .WithMany()
                        .HasForeignKey("base_ed_book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Books.EducationalBookInBalance", b =>
                {
                    b.Navigation("Decommissioning");
                });

            modelBuilder.Entity("Domain.Entities.RentRequests.EducationalBookSchoolRentRequest", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.Entities.Reports.PeopleRents.PeopleRentReport", b =>
                {
                    b.Navigation("StaticsticsToGenres");
                });

            modelBuilder.Entity("Domain.Entities.SchoolStructure.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("EducationalBooks");

                    b.Navigation("Employees");

                    b.Navigation("Grounds");

                    b.Navigation("Librarians");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entities.SchoolStructure.SchoolClass", b =>
                {
                    b.Navigation("ClassSubjects");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entities.SchoolStructure.SchoolGround", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("EducationalBooks");

                    b.Navigation("Employees");

                    b.Navigation("Librarians");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entities.SchoolStructure.Student", b =>
                {
                    b.Navigation("EdBookRents");
                });

            modelBuilder.Entity("Domain.Entities.Subjects.ClassSubject", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("Domain.Entities.Subjects.ClassSubjectChapter", b =>
                {
                    b.Navigation("EdBooks");
                });

            modelBuilder.Entity("Domain.Entities.Supplies.BookSupply", b =>
                {
                    b.Navigation("EdBooks");
                });

            modelBuilder.Entity("Domain.HelpingEntities.BookAuthor", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Domain.HelpingEntities.Editor", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Domain.HelpingEntities.PublishingHouse", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Domain.HelpingEntities.PublishingPlace", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Domain.HelpingEntities.Subject", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
